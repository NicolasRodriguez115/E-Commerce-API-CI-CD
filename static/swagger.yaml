openapi: 3.0.0
info:
  title: E-commerce API
  version: 1.0.0
  description: API for managing an e-commerce platform

paths:
  /customers:
    get:
      summary: Get a list of customers
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      summary: Create a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

  /customers/{customer_id}:
    get:
      summary: Get a customer using their unique ID
      parameters:
        - name: customer_id
          in: path
          required: true
          description: The unique ID of the customer
          schema:
            type: integer
      responses:
        '404':
          description: Customer not found in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer not found
        '200':
          description: Customer found in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

    delete:
      summary: Delete a customer using their unique ID
      parameters:
        - name: customer_id
          in: path
          required: true
          description: The unique ID of the customer
          schema:
            type: integer
      responses:
        '404':
          description: Customer not found in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer not found
        '200':
          description: Customer found in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    patch:
      summary: Update the information of a customer using their unique ID
      parameters:
        - name: customer_id
          in: path
          required: true
          description: The unique ID of the customer
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer updated successfully
        '400':
          description: Customer not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Customer not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An error occurred

  /customers_account:
    get:
      summary: Get all customer accounts
      responses:
        '200':
          description: A list of customer accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerAccount'
    post:
      summary: Create a new customer account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerAccount'
      responses:
        '201':
          description: Customer account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAccount'

  /customers_account/{customer_id}:
    get:
      summary: Get a customer account using their unique ID
      parameters:
        - name: customer_id
          in: path
          required: true
          description: The unique ID of the customer
          schema:
            type: integer
      responses:
        '404':
          description: Account not found in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account not found
        '200':
          description: Account found in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAccount'
    delete:
      summary: Delete an account using their unique ID
      parameters:
        - name: customer_id
          in: path
          required: true
          description: The unique ID of the customer
          schema:
            type: integer
      responses:
        '404':
          description: Account not found in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account not found
        '200':
          description: Account found in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account deleted successfully
    patch:
      summary: Update the credentials of an account using their unique ID
      parameters:
        - name: customer_id
          in: path
          required: true
          description: The unique ID of the account
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerAccount'
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account credentials updated successfully
        '400':
          description: Customer not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Customer not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An error occurred

  /customers_account/login:
    post:
      summary: Login to a customer account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johndoe
                password:
                  type: string
                  format: password
                  example: password123
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid username or password
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An error occurred

  /products:
    get:
      summary: Get all products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/{product_id}:
    get:
      summary: Get a product using their unique ID
      parameters:
        - name: product_id
          in: path
          required: true
          description: The unique ID of the product
          schema:
            type: integer
      responses:
        '404':
          description: Product not found in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product not found
        '200':
          description: Product found in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      summary: Delete a product using their unique ID
      parameters:
        - name: product_id
          in: path
          required: true
          description: The unique ID of the product
          schema:
            type: integer
      responses:
        '404':
          description: Product not found in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product not found
        '200':
          description: Product found in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product deleted successfully
    patch:
      summary: Update the information of a product using their unique ID
      parameters:
        - name: product_id
          in: path
          required: true
          description: The unique ID of the product
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product updated successfully
        '400':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Product not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An error occurred

  /orders:
    post:
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/{order_id}:
    get:
      summary: Get an order using their unique ID
      parameters:
        - name: order_id
          in: path
          required: true
          description: The unique ID of the order
          schema:
            type: integer
      responses:
        '404':
          description: Order not found in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order not found
        '200':
          description: Order found in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        phone:
          type: string
          example: '123-456-7890'
      required:
        - name
        - email
        - phone

    CustomerAccount:
      type: object
      properties:
        id:
          type: integer
          example: 1
        customer_id:
          type: integer
          example: 1
        account_number:
          type: string
          example: 'ACC123456'
      required:
        - customer_id
        - account_number

    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Product Name'
        price:
          type: number
          format: float
          example: 19.99
        details:
          type: string
          example: 'Product details'
      required:
        - name
        - price
        - details

    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        customer_id:
          type: integer
          example: 1
        order_date:
          type: string
          format: date-time
          example: '2023-10-01T12:00:00Z'
        status:
          type: string
          example: 'Pending'